// Generated by CoffeeScript 1.9.1
(function() {
  var dataToArray, fs, header, html, listenCallback, net, options, path, server;

  fs = require('fs');

  net = require('net');

  path = require('path');

  header = "HTTP/1.0 200 header \n" + "Content-Type: text/html\n";

  html = "<!DOCTYPE html> <html> <head> <title>Webserver Test</title> <meta charset='utf-8'> </head> <body> Ceci est le body </body> </html>";

  options = {
    allowHalfOpen: false,
    pauseOnConnect: false
  };

  dataToArray = function(data) {
    return data.toString().split("\n");
  };

  server = net.createServer(options, function(socket) {
    var closeSocket, connectSocket, connectionSocket, dataSocket, errorSocket;
    socket.on('connection', connectionSocket = function() {
      return console.log('socket : connection' + socket.remoteAddress(+':' + socket.remotePort));
    });
    socket.on('connect', connectSocket = function() {
      return console.log('socket : connect');
    });
    socket.on('data', dataSocket = function(data) {
      var array, filePath, readStream, stat;
      console.log('socket : ' + socket.remoteAddress + ' DATA: -> ' + data);
      array = dataToArray(data);
      console.log(array);
      filePath = path.join(__dirname, '/webroot/index.html');
      stat = fs.statSync(filePath);
      readStream = fs.createReadStream(filePath);
      socket.write(header);
      socket.write('\r\n');
      readStream.on('open', function() {
        readStream.pipe(socket);
        return console.log('readStream ouvert');
      });
      return readStream.on('close', function() {
        console.log('readStream close');
        return socket.end();
      });
    });
    socket.on('error', errorSocket = function() {
      return console.log('socket : error');
    });
    return socket.on('close', closeSocket = function() {
      return console.log('socket : close');
    });
  });

  server.listen(3333, 'patrice', listenCallback = function() {
    var address, closeServer, connectionServer;
    address = server.address();
    console.log('server bound', address);
    server.on('connection', connectionServer = function(sock) {
      var closeSock, connectSocket, errorSock, remoteAddress, remotePort;
      remoteAddress = sock.remoteAddress;
      remotePort = sock.remotePort;
      console.log('server : connection ', remoteAddress, remotePort);
      sock.on('connect', connectSocket = function() {
        return console.log('socket inside: connect');
      });
      sock.on('error', errorSock = function() {
        return console.log('sock inside: error');
      });
      return sock.on('close', closeSock = function() {
        return console.log('sock inside: close');
      });
    });
    return server.on('close', closeServer = function() {
      return console.log('server : close');
    });
  });

}).call(this);
