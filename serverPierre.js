// Generated by CoffeeScript 1.9.0
(function() {
  var contentType, contentTypeArray, fs, htmlError, method, net, path, processReqHeader, processResHeader, processResponse, protocol, server, statusLine, www;

  net = require('net');

  fs = require('fs');

  path = require('path');

  www = './webroot';

  htmlError = '<!DOCTYPE HTML> <html> <head> </head> <body> La page que vous recherchez n\'existe pas </body> </html>';

  contentTypeArray = {
    html: 'text/html',
    map: 'text/plain',
    css: 'text/css',
    js: 'application/javascript',
    jpg: 'image/jpeg',
    jpeg: 'image/jpeg',
    mp3: 'audio/mp3',
    mp4: 'video/mpeg'
  };

  statusLine = null;

  method = null;

  protocol = null;

  contentType = null;

  processReqHeader = function(reqHeader) {
    var filePath, str;
    str = reqHeader.toString('utf8');
    statusLine = str.substr(0, str.indexOf('\r\n'));
    method = statusLine.substr(0, statusLine.indexOf(' '));
    protocol = statusLine.substr(statusLine.indexOf('HTTP'));
    return filePath = statusLine.substring(statusLine.indexOf(method) + method.length + 1, statusLine.indexOf(' HTTP'));
  };

  processResHeader = function(realPath) {
    var extension;
    extension = path.extname(realPath);
    extension = extension.substr(1);
    return contentType = contentTypeArray[extension];
  };

  processResponse = function(file, respHeader, fileStream, socket) {
    if (!(contentType === void 0)) {
      return socket.write(respHeader, function() {
        var cbFileStream;
        console.log(file, respHeader);
        fileStream.pipe(socket);
        return fileStream.on('end', cbFileStream = function() {
          return socket.end();
        });
      });
    } else {
      return socket.end();
    }
  };

  server = net.createServer(function(socket) {
    var cbSocketOnDATA;
    return socket.on('data', cbSocketOnDATA = function(reqHeader) {
      var content, filePath, fileStream, realPath, respHeader;
      filePath = processReqHeader(reqHeader);
      console.log('filePath', filePath);
      realPath = path.join(www, filePath === '/' ? 'index.html' : filePath);
      content = processResHeader(realPath);
      respHeader = "HTTP/1.0 200 OK\r\nContent-Type:" + contentType + "\r\n\r\n";
      fileStream = fs.createReadStream(realPath);
      return processResponse(filePath, respHeader, fileStream, socket);
    });
  });

  server.listen(3333, 'localhost', function() {
    return console.log('server ONline\r\n');
  });

}).call(this);
