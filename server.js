// Generated by CoffeeScript 1.9.1
(function() {
  var fs, listenCallback, net, ok, path, server;

  fs = require('fs');

  net = require('net');

  path = require('path');

  ok = "HTTP/1.0 200 OK\n" + "Content-Type: text/html\n";

  server = net.createServer(function(socket) {
    var closeSocket, connectSocket, connectionSocket, dataSocket, errorSocket;
    socket.on('connection', connectionSocket = function() {
      return console.log('socket : connection' + socket.remoteAddress(+':' + socket.remotePort));
    });
    socket.on('connect', connectSocket = function() {
      return console.log('socket : connect');
    });
    socket.on('data', dataSocket = function(data) {});
    socket.on('error', errorSocket = function() {
      return console.log('socket : error');
    });
    return socket.on('close', closeSocket = function() {
      return console.log('socket : close');
    });
  });

  server.listen(8124, 'localhost', listenCallback = function() {
    var address, closeServer, connectionServer;
    address = server.address();
    console.log('server bound', address);
    server.on('connection', connectionServer = function(sock) {
      var closeSocket, connectSocket, dataSocket, errorSocket, remoteAddress, remotePort;
      remoteAddress = sock.remoteAddress;
      remotePort = sock.remotePort;
      console.log('server : connection ', remoteAddress, remotePort);
      sock.on('connect', connectSocket = function() {
        return console.log('socket inside: connect');
      });
      sock.on('data', dataSocket = function(data) {
        var array, filePath, readStream, stat;
        array = data.split('\n');
        console.log(array[0]);
        sock.pipe(ok);
        filePath = path.join(__dirname, '/webroot/index.html');
        stat = fs.statSync(filePath);
        readStream = fs.createReadStream(filePath);
        readStream.pipe(sock);
        return console.log('sock : DATA ', 'encoding', sock.remoteAddress, ': ', data);
      });
      sock.on('error', errorSocket = function() {
        return console.log('socket inside: error');
      });
      return sock.on('close', closeSocket = function() {
        return console.log('socket inside: close');
      });
    });
    return server.on('close', closeServer = function() {
      return console.log('server : close');
    });
  });

}).call(this);
