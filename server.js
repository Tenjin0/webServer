// Generated by CoffeeScript 1.9.0
(function() {
  var DEFAULT_EXTENSION, DEFAULT_PROTOCOL, FIRST_LINE_REGEX, METHOD_REGEX, PARENT_DIRECTORY_REGEX, contentTypeMap, createResponseHeader, errorHtml, ext, extractRequestLine, fs, html, httpRequest, net, newContentTypeMap, options, path, root, server, simpleHeader, statusCode, subType, tab, type, _i, _len, _ref;

  fs = require('fs');

  net = require('net');

  path = require('path');

  root = __dirname + '/webroot';

  options = {
    allowHalfOpen: false,
    pauseOnConnect: false
  };

  statusCode = {
    200: "OK",
    201: "Created",
    202: "Accepted",
    204: "No Content",
    301: "Moved Permanently",
    302: "Moved Temporarily",
    304: "Not Modified",
    400: "Bad Request",
    401: "Unauthorized",
    403: "Forbidden",
    404: "Not Found",
    500: "Internal Server Error",
    501: "Not Implemented",
    502: "Bad Gateway",
    503: "Service Unavailable"
  };

  simpleHeader = "GET / HTTP/1.0";

  contentTypeMap = {
    'image': {
      tab: [".jpg", ".jpeg", ".png", ".bmp", ".gif"]
    },
    'application': {
      tab: ['.js'],
      replace: ['javascript']
    },
    'video': {
      tab: ['.mp4']
    },
    'audio': {
      tab: ['.mp3']
    },
    'text': {
      tab: ['.html', '.css']
    }
  };

  newContentTypeMap = [];

  for (type in contentTypeMap) {
    tab = contentTypeMap[type];
    _ref = tab['tab'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ext = _ref[_i];
      subType = tab['replace'] === void 0 ? ext.replace('.', '') : tab['replace'];
      newContentTypeMap.push((newContentTypeMap[ext] = type + "/" + subType));
    }
  }

  errorHtml = function(code) {
    return {
      body: "<!DOCTYPE html> <html> <head> <title>Webserver Test</title> <meta charset='utf-8'> </head> <body> <H2>" + code + " " + statusCode[code] + "</H2> </body> </html>",
      toString: function() {
        return this.body.toString();
      }
    };
  };

  html = "<!DOCTYPE html> <html> <head> <title>Webserver Test</title> <meta charset='utf-8'> </head> <body> Ceci est le body </body> </html>";

  FIRST_LINE_REGEX = new RegExp("(GET|POST|HEAD)[ ]([\/].*[ ]){1,}HTTP\/1\.[0-9]");

  PARENT_DIRECTORY_REGEX = new RegExp("[\.]{2,}[\/].*");

  METHOD_REGEX = new RegExp("(GET|POST|HEAD)");

  DEFAULT_PROTOCOL = 'HTTP/1.0';

  DEFAULT_EXTENSION = '.html';

  extractRequestLine = function(data) {
    var firstLine, requestLineArray, requestLineJSON;
    firstLine = (data.toString().split("\r\n"))[0];
    if (FIRST_LINE_REGEX.test(firstLine)) {
      requestLineArray = firstLine.split(" ");
      requestLineJSON = {
        "method": requestLineArray[0],
        "path": requestLineArray[1] === '/' ? 'index.html' : requestLineArray[1],
        "protocol": requestLineArray[2]
      };
      return requestLineJSON;
    }
    return null;
  };

  createResponseHeader = function(protocole, code, ext, lengthFile) {
    return {
      statusLine: protocole + " " + code + " " + statusCode[code] + "\r\n",
      date: null,
      server: null,
      contentType: "Content-Type: " + (ext && !(newContentTypeMap[ext] === void 0) ? newContentTypeMap[ext] + "\r\n" : "text/plain\r\n"),
      contentLength: lengthFile ? "Content-Length: " + lengthFile + "\r\n" : "Content-Length: 0\r\n",
      expires: null,
      lastModified: null,
      connection: "Connection: close\r\n",
      toString: function() {
        return "" + this.statusLine + this.contentType + this.contentLength + this.connection + "\r\n";
      }
    };
  };

  httpRequest = "GET / HTTP/1.0\r\n Host: patrice:3333\r\n Connection: keep-alive\r\n Cache-Control: max-age=0\r\n Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/40.0.2214.111 Chrome/40.0.2214.111 Safari/537.36\r\n Accept-Encoding: gzip, deflate, sdch\r\n Accept-Language: fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4\r\n";

  server = net.createServer(options, function(socket) {
    var closeSocket, connectSocket, connectionSocket, dataSocket, errorSocket;
    socket.on('connection', connectionSocket = function() {
      return console.log('socket : connection' + socket.remoteAddress(+':' + socket.remotePort + "\n"));
    });
    socket.on('connect', connectSocket = function() {
      return console.log('socket : connect');
    });
    socket.on('data', dataSocket = function(data) {
      var absolutePath, extension, headerResponse, requestLineHeader;
      requestLineHeader = extractRequestLine(data);
      console.log('data', data);
      console.log('requestLineHeader', requestLineHeader);
      if (requestLineHeader) {
        absolutePath = path.join(root, requestLineHeader['path']);
        extension = path.extname(absolutePath.toLowerCase());
        return fs.stat(absolutePath, function(err, stats) {
          var codeError, headerResponse, readStream, taille, tempStats;
          codeError = null;
          tempStats = stats;
          taille = null;
          if (err) {
            codeError = 404;
          } else if (PARENT_DIRECTORY_REGEX.test(requestLineHeader['path'])) {
            codeError = 403;
          } else if (stats.isFile()) {
            headerResponse = createResponseHeader(requestLineHeader['protocol'], 200, extension, tempStats["size"]);
            readStream = fs.createReadStream(absolutePath);
          } else if (stats.isDirectory()) {
            codeError = 403;
          }
          if (codeError) {
            headerResponse = createResponseHeader(requestLineHeader['protocol'], codeError, DEFAULT_EXTENSION, Buffer.byteLength((errorHtml(codeError)).toString(), 'utf8'));
            socket.write(headerResponse.toString(), function() {
              return socket.write((errorHtml(codeError)).toString() + '\n');
            });
          }
          console.log('>>>>> \n');
          console.log('\n', requestLineHeader['path'], 'extension', extension);
          console.log(headerResponse.toString());
          if (readStream) {
            readStream.on('open', function() {
              if ((requestLineHeader['method'].toUpperCase() === 'GET') || (requestLineHeader['method'].toUpperCase() === 'POST')) {
                return socket.write(headerResponse.toString(), function() {
                  return readStream.pipe(socket);
                });
              }
            });
            return readStream.on('close', function() {
              return console.log('readStream close');
            });
          }
        });
      } else {
        headerResponse = createResponseHeader(DEFAULT_PROTOCOL, 400);
        console.log('headerResponse error', headerResponse.toString());
        return socket.write(headerResponse.toString());
      }
    });
    socket.on('error', errorSocket = function() {});
    return socket.on('close', closeSocket = function() {});
  });

  server.listen(9000, 'localhost');

}).call(this);
